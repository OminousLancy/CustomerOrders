//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICustomerClient {
  /**
   * @param page (optional)
   * @param take (optional)
   * @return Success
   */
  getList(page: number | undefined, take: number | undefined): Observable<CustomerDtoPaginatedResponse>;
  /**
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined): Observable<CustomerDto>;
  /**
   * @param body (optional)
   * @return Success
   */
  create(body: CustomerCreateDto | undefined): Observable<CustomerDto>;
  /**
   * @param body (optional)
   * @return Success
   */
  update(body: CustomerDto | undefined): Observable<CustomerDto>;
}

@Injectable()
export class CustomerClient implements ICustomerClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param page (optional)
   * @param take (optional)
   * @return Success
   */
  getList(page: number | undefined, take: number | undefined): Observable<CustomerDtoPaginatedResponse> {
    let url_ = this.baseUrl + "/api/Customer/GetList?";
    if (page === null)
      throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (take === null)
      throw new Error("The parameter 'take' cannot be null.");
    else if (take !== undefined)
      url_ += "take=" + encodeURIComponent("" + take) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetList(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CustomerDtoPaginatedResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CustomerDtoPaginatedResponse>;
    }));
  }

  protected processGetList(response: HttpResponseBase): Observable<CustomerDtoPaginatedResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CustomerDtoPaginatedResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined): Observable<CustomerDto> {
    let url_ = this.baseUrl + "/api/Customer/GetById?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CustomerDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CustomerDto>;
    }));
  }

  protected processGetById(response: HttpResponseBase): Observable<CustomerDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CustomerDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  create(body: CustomerCreateDto | undefined): Observable<CustomerDto> {
    let url_ = this.baseUrl + "/api/Customer/Create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCreate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CustomerDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CustomerDto>;
    }));
  }

  protected processCreate(response: HttpResponseBase): Observable<CustomerDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CustomerDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  update(body: CustomerDto | undefined): Observable<CustomerDto> {
    let url_ = this.baseUrl + "/api/Customer/Update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUpdate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CustomerDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CustomerDto>;
    }));
  }

  protected processUpdate(response: HttpResponseBase): Observable<CustomerDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CustomerDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IOrderClient {
  /**
   * @param page (optional)
   * @param take (optional)
   * @return Success
   */
  getList(page: number | undefined, take: number | undefined): Observable<OrderDtoPaginatedResponse>;
  /**
   * @param id (optional)
   * @param status (optional)
   * @return Success
   */
  changeStatus(id: number | undefined, status: OrderStatus | undefined): Observable<OrderStatus>;
  /**
   * @param body (optional)
   * @return Success
   */
  create(body: OrderCreateDto | undefined): Observable<OrderDto>;
  /**
   * @param body (optional)
   * @return Success
   */
  addOrderLine(body: OrderLineCreateDto | undefined): Observable<string>;
  /**
   * @param orderId (optional)
   * @param orderLineId (optional)
   * @return Success
   */
  deleteOrderLine(orderId: number | undefined, orderLineId: number | undefined): Observable<string>;
}

@Injectable()
export class OrderClient implements IOrderClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param page (optional)
   * @param take (optional)
   * @return Success
   */
  getList(page: number | undefined, take: number | undefined): Observable<OrderDtoPaginatedResponse> {
    let url_ = this.baseUrl + "/api/Order/GetList?";
    if (page === null)
      throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (take === null)
      throw new Error("The parameter 'take' cannot be null.");
    else if (take !== undefined)
      url_ += "take=" + encodeURIComponent("" + take) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetList(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<OrderDtoPaginatedResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<OrderDtoPaginatedResponse>;
    }));
  }

  protected processGetList(response: HttpResponseBase): Observable<OrderDtoPaginatedResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = OrderDtoPaginatedResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @param status (optional)
   * @return Success
   */
  changeStatus(id: number | undefined, status: OrderStatus | undefined): Observable<OrderStatus> {
    let url_ = this.baseUrl + "/api/Order/ChangeStatus?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    if (status === null)
      throw new Error("The parameter 'status' cannot be null.");
    else if (status !== undefined)
      url_ += "status=" + encodeURIComponent("" + status) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processChangeStatus(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processChangeStatus(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<OrderStatus>;
        }
      } else
        return _observableThrow(response_) as any as Observable<OrderStatus>;
    }));
  }

  protected processChangeStatus(response: HttpResponseBase): Observable<OrderStatus> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : <any>null;

        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  create(body: OrderCreateDto | undefined): Observable<OrderDto> {
    let url_ = this.baseUrl + "/api/Order/Create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCreate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<OrderDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<OrderDto>;
    }));
  }

  protected processCreate(response: HttpResponseBase): Observable<OrderDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = OrderDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  addOrderLine(body: OrderLineCreateDto | undefined): Observable<string> {
    let url_ = this.baseUrl + "/api/Order/AddOrderLine";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAddOrderLine(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAddOrderLine(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<string>;
        }
      } else
        return _observableThrow(response_) as any as Observable<string>;
    }));
  }

  protected processAddOrderLine(response: HttpResponseBase): Observable<string> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : <any>null;

        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param orderId (optional)
   * @param orderLineId (optional)
   * @return Success
   */
  deleteOrderLine(orderId: number | undefined, orderLineId: number | undefined): Observable<string> {
    let url_ = this.baseUrl + "/api/Order/DeleteOrderLine?";
    if (orderId === null)
      throw new Error("The parameter 'orderId' cannot be null.");
    else if (orderId !== undefined)
      url_ += "orderId=" + encodeURIComponent("" + orderId) + "&";
    if (orderLineId === null)
      throw new Error("The parameter 'orderLineId' cannot be null.");
    else if (orderLineId !== undefined)
      url_ += "orderLineId=" + encodeURIComponent("" + orderLineId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processDeleteOrderLine(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteOrderLine(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<string>;
        }
      } else
        return _observableThrow(response_) as any as Observable<string>;
    }));
  }

  protected processDeleteOrderLine(response: HttpResponseBase): Observable<string> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : <any>null;

        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IProductClient {
  /**
   * @param page (optional)
   * @param take (optional)
   * @return Success
   */
  getList(page: number | undefined, take: number | undefined): Observable<ProductDtoPaginatedResponse>;
  /**
   * @param body (optional)
   * @return Success
   */
  create(body: ProductCreateDto | undefined): Observable<ProductDto>;
  /**
   * @param body (optional)
   * @return Success
   */
  update(body: ProductDto | undefined): Observable<ProductDto>;
}

@Injectable()
export class ProductClient implements IProductClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param page (optional)
   * @param take (optional)
   * @return Success
   */
  getList(page: number | undefined, take: number | undefined): Observable<ProductDtoPaginatedResponse> {
    let url_ = this.baseUrl + "/api/Product/GetList?";
    if (page === null)
      throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (take === null)
      throw new Error("The parameter 'take' cannot be null.");
    else if (take !== undefined)
      url_ += "take=" + encodeURIComponent("" + take) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetList(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ProductDtoPaginatedResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ProductDtoPaginatedResponse>;
    }));
  }

  protected processGetList(response: HttpResponseBase): Observable<ProductDtoPaginatedResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductDtoPaginatedResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  create(body: ProductCreateDto | undefined): Observable<ProductDto> {
    let url_ = this.baseUrl + "/api/Product/Create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCreate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ProductDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ProductDto>;
    }));
  }

  protected processCreate(response: HttpResponseBase): Observable<ProductDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  update(body: ProductDto | undefined): Observable<ProductDto> {
    let url_ = this.baseUrl + "/api/Product/Update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUpdate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ProductDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ProductDto>;
    }));
  }

  protected processUpdate(response: HttpResponseBase): Observable<ProductDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IReportClient {
  /**
   * @param customerId (optional)
   * @param reportType (optional)
   * @return Success
   */
  getCustomerReport(customerId: number | undefined, reportType: ReportType | undefined): Observable<CustomerReportDto>;
}

@Injectable()
export class ReportClient implements IReportClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param customerId (optional)
   * @param reportType (optional)
   * @return Success
   */
  getCustomerReport(customerId: number | undefined, reportType: ReportType | undefined): Observable<CustomerReportDto> {
    let url_ = this.baseUrl + "/api/Report/GetCustomerReport?";
    if (customerId === null)
      throw new Error("The parameter 'customerId' cannot be null.");
    else if (customerId !== undefined)
      url_ += "customerId=" + encodeURIComponent("" + customerId) + "&";
    if (reportType === null)
      throw new Error("The parameter 'reportType' cannot be null.");
    else if (reportType !== undefined)
      url_ += "reportType=" + encodeURIComponent("" + reportType) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetCustomerReport(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetCustomerReport(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CustomerReportDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CustomerReportDto>;
    }));
  }

  protected processGetCustomerReport(response: HttpResponseBase): Observable<CustomerReportDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CustomerReportDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class CustomerCreateDto implements ICustomerCreateDto {
  name?: string | undefined;
  lastName?: string | undefined;
  address?: string | undefined;
  photoUrl?: string | undefined;

  constructor(data?: ICustomerCreateDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.lastName = _data["lastName"];
      this.address = _data["address"];
      this.photoUrl = _data["photoUrl"];
    }
  }

  static fromJS(data: any): CustomerCreateDto {
    data = typeof data === 'object' ? data : {};
    let result = new CustomerCreateDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    data["lastName"] = this.lastName;
    data["address"] = this.address;
    data["photoUrl"] = this.photoUrl;
    return data;
  }

  clone(): CustomerCreateDto {
    const json = this.toJSON();
    let result = new CustomerCreateDto();
    result.init(json);
    return result;
  }
}

export interface ICustomerCreateDto {
  name?: string | undefined;
  lastName?: string | undefined;
  address?: string | undefined;
  photoUrl?: string | undefined;
}

export class CustomerDto implements ICustomerDto {
  id?: number;
  name?: string | undefined;
  lastName?: string | undefined;
  address?: string | undefined;
  photoUrl?: string | undefined;

  constructor(data?: ICustomerDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.lastName = _data["lastName"];
      this.address = _data["address"];
      this.photoUrl = _data["photoUrl"];
    }
  }

  static fromJS(data: any): CustomerDto {
    data = typeof data === 'object' ? data : {};
    let result = new CustomerDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["lastName"] = this.lastName;
    data["address"] = this.address;
    data["photoUrl"] = this.photoUrl;
    return data;
  }

  clone(): CustomerDto {
    const json = this.toJSON();
    let result = new CustomerDto();
    result.init(json);
    return result;
  }
}

export interface ICustomerDto {
  id?: number;
  name?: string | undefined;
  lastName?: string | undefined;
  address?: string | undefined;
  photoUrl?: string | undefined;
}

export class CustomerDtoPaginatedResponse implements ICustomerDtoPaginatedResponse {
  readonly items?: CustomerDto[] | undefined;
  page?: number;
  pageSize?: number;
  totalCount?: number;
  totalPages?: number;

  constructor(data?: ICustomerDtoPaginatedResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        (<any>this).items = [] as any;
        for (let item of _data["items"])
          (<any>this).items!.push(CustomerDto.fromJS(item));
      }
      this.page = _data["page"];
      this.pageSize = _data["pageSize"];
      this.totalCount = _data["totalCount"];
      this.totalPages = _data["totalPages"];
    }
  }

  static fromJS(data: any): CustomerDtoPaginatedResponse {
    data = typeof data === 'object' ? data : {};
    let result = new CustomerDtoPaginatedResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    data["page"] = this.page;
    data["pageSize"] = this.pageSize;
    data["totalCount"] = this.totalCount;
    data["totalPages"] = this.totalPages;
    return data;
  }

  clone(): CustomerDtoPaginatedResponse {
    const json = this.toJSON();
    let result = new CustomerDtoPaginatedResponse();
    result.init(json);
    return result;
  }
}

export interface ICustomerDtoPaginatedResponse {
  items?: CustomerDto[] | undefined;
  page?: number;
  pageSize?: number;
  totalCount?: number;
  totalPages?: number;
}

export class CustomerReportDto implements ICustomerReportDto {
  totalOrders?: number;
  totalSum?: number;
  mostOrderedProduct?: string | undefined;

  constructor(data?: ICustomerReportDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalOrders = _data["totalOrders"];
      this.totalSum = _data["totalSum"];
      this.mostOrderedProduct = _data["mostOrderedProduct"];
    }
  }

  static fromJS(data: any): CustomerReportDto {
    data = typeof data === 'object' ? data : {};
    let result = new CustomerReportDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["totalOrders"] = this.totalOrders;
    data["totalSum"] = this.totalSum;
    data["mostOrderedProduct"] = this.mostOrderedProduct;
    return data;
  }

  clone(): CustomerReportDto {
    const json = this.toJSON();
    let result = new CustomerReportDto();
    result.init(json);
    return result;
  }
}

export interface ICustomerReportDto {
  totalOrders?: number;
  totalSum?: number;
  mostOrderedProduct?: string | undefined;
}

export class OrderCreateDto implements IOrderCreateDto {
  customerId?: number;
  orderLines?: OrderLineDto[] | undefined;

  constructor(data?: IOrderCreateDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.customerId = _data["customerId"];
      if (Array.isArray(_data["orderLines"])) {
        this.orderLines = [] as any;
        for (let item of _data["orderLines"])
          this.orderLines!.push(OrderLineDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): OrderCreateDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderCreateDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["customerId"] = this.customerId;
    if (Array.isArray(this.orderLines)) {
      data["orderLines"] = [];
      for (let item of this.orderLines)
        data["orderLines"].push(item.toJSON());
    }
    return data;
  }

  clone(): OrderCreateDto {
    const json = this.toJSON();
    let result = new OrderCreateDto();
    result.init(json);
    return result;
  }
}

export interface IOrderCreateDto {
  customerId?: number;
  orderLines?: OrderLineDto[] | undefined;
}

export class OrderDto implements IOrderDto {
  id?: number;
  customerName?: string | undefined;
  orderLines?: OrderLineDto[] | undefined;
  status?: OrderStatus;
  created?: Date;
  updated?: Date | undefined;

  constructor(data?: IOrderDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.customerName = _data["customerName"];
      if (Array.isArray(_data["orderLines"])) {
        this.orderLines = [] as any;
        for (let item of _data["orderLines"])
          this.orderLines!.push(OrderLineDto.fromJS(item));
      }
      this.status = _data["status"];
      this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
      this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): OrderDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["customerName"] = this.customerName;
    if (Array.isArray(this.orderLines)) {
      data["orderLines"] = [];
      for (let item of this.orderLines)
        data["orderLines"].push(item.toJSON());
    }
    data["status"] = this.status;
    data["created"] = this.created ? this.created.toISOString() : <any>undefined;
    data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
    return data;
  }

  clone(): OrderDto {
    const json = this.toJSON();
    let result = new OrderDto();
    result.init(json);
    return result;
  }
}

export interface IOrderDto {
  id?: number;
  customerName?: string | undefined;
  orderLines?: OrderLineDto[] | undefined;
  status?: OrderStatus;
  created?: Date;
  updated?: Date | undefined;
}

export class OrderDtoPaginatedResponse implements IOrderDtoPaginatedResponse {
  readonly items?: OrderDto[] | undefined;
  page?: number;
  pageSize?: number;
  totalCount?: number;
  totalPages?: number;

  constructor(data?: IOrderDtoPaginatedResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        (<any>this).items = [] as any;
        for (let item of _data["items"])
          (<any>this).items!.push(OrderDto.fromJS(item));
      }
      this.page = _data["page"];
      this.pageSize = _data["pageSize"];
      this.totalCount = _data["totalCount"];
      this.totalPages = _data["totalPages"];
    }
  }

  static fromJS(data: any): OrderDtoPaginatedResponse {
    data = typeof data === 'object' ? data : {};
    let result = new OrderDtoPaginatedResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    data["page"] = this.page;
    data["pageSize"] = this.pageSize;
    data["totalCount"] = this.totalCount;
    data["totalPages"] = this.totalPages;
    return data;
  }

  clone(): OrderDtoPaginatedResponse {
    const json = this.toJSON();
    let result = new OrderDtoPaginatedResponse();
    result.init(json);
    return result;
  }
}

export interface IOrderDtoPaginatedResponse {
  items?: OrderDto[] | undefined;
  page?: number;
  pageSize?: number;
  totalCount?: number;
  totalPages?: number;
}

export class OrderLineCreateDto implements IOrderLineCreateDto {
  orderId?: number;
  product?: ProductDto;
  count?: number;
  price?: number;

  constructor(data?: IOrderLineCreateDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderId = _data["orderId"];
      this.product = _data["product"] ? ProductDto.fromJS(_data["product"]) : <any>undefined;
      this.count = _data["count"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): OrderLineCreateDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderLineCreateDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["orderId"] = this.orderId;
    data["product"] = this.product ? this.product.toJSON() : <any>undefined;
    data["count"] = this.count;
    data["price"] = this.price;
    return data;
  }

  clone(): OrderLineCreateDto {
    const json = this.toJSON();
    let result = new OrderLineCreateDto();
    result.init(json);
    return result;
  }
}

export interface IOrderLineCreateDto {
  orderId?: number;
  product?: ProductDto;
  count?: number;
  price?: number;
}

export class OrderLineDto implements IOrderLineDto {
  id?: number;
  orderId?: number;
  product?: ProductDto;
  count?: number;
  price?: number;

  constructor(data?: IOrderLineDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.orderId = _data["orderId"];
      this.product = _data["product"] ? ProductDto.fromJS(_data["product"]) : <any>undefined;
      this.count = _data["count"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): OrderLineDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderLineDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["orderId"] = this.orderId;
    data["product"] = this.product ? this.product.toJSON() : <any>undefined;
    data["count"] = this.count;
    data["price"] = this.price;
    return data;
  }

  clone(): OrderLineDto {
    const json = this.toJSON();
    let result = new OrderLineDto();
    result.init(json);
    return result;
  }
}

export interface IOrderLineDto {
  id?: number;
  orderId?: number;
  product?: ProductDto;
  count?: number;
  price?: number;
}

export enum OrderStatus {
  _0 = 0,
  _1 = 1,
  _2 = 2,
  _3 = 3,
}

export class ProductCreateDto implements IProductCreateDto {
  name?: string | undefined;
  price?: number;

  constructor(data?: IProductCreateDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): ProductCreateDto {
    data = typeof data === 'object' ? data : {};
    let result = new ProductCreateDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    data["price"] = this.price;
    return data;
  }

  clone(): ProductCreateDto {
    const json = this.toJSON();
    let result = new ProductCreateDto();
    result.init(json);
    return result;
  }
}

export interface IProductCreateDto {
  name?: string | undefined;
  price?: number;
}

export class ProductDto implements IProductDto {
  id?: number;
  name?: string | undefined;
  price?: number;

  constructor(data?: IProductDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): ProductDto {
    data = typeof data === 'object' ? data : {};
    let result = new ProductDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["price"] = this.price;
    return data;
  }

  clone(): ProductDto {
    const json = this.toJSON();
    let result = new ProductDto();
    result.init(json);
    return result;
  }
}

export interface IProductDto {
  id?: number;
  name?: string | undefined;
  price?: number;
}

export class ProductDtoPaginatedResponse implements IProductDtoPaginatedResponse {
  readonly items?: ProductDto[] | undefined;
  page?: number;
  pageSize?: number;
  totalCount?: number;
  totalPages?: number;

  constructor(data?: IProductDtoPaginatedResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        (<any>this).items = [] as any;
        for (let item of _data["items"])
          (<any>this).items!.push(ProductDto.fromJS(item));
      }
      this.page = _data["page"];
      this.pageSize = _data["pageSize"];
      this.totalCount = _data["totalCount"];
      this.totalPages = _data["totalPages"];
    }
  }

  static fromJS(data: any): ProductDtoPaginatedResponse {
    data = typeof data === 'object' ? data : {};
    let result = new ProductDtoPaginatedResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    data["page"] = this.page;
    data["pageSize"] = this.pageSize;
    data["totalCount"] = this.totalCount;
    data["totalPages"] = this.totalPages;
    return data;
  }

  clone(): ProductDtoPaginatedResponse {
    const json = this.toJSON();
    let result = new ProductDtoPaginatedResponse();
    result.init(json);
    return result;
  }
}

export interface IProductDtoPaginatedResponse {
  items?: ProductDto[] | undefined;
  page?: number;
  pageSize?: number;
  totalCount?: number;
  totalPages?: number;
}

export enum ReportType {
  _0 = 0,
  _1 = 1,
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
